Script started on 2025-02-18 19:06:25+00:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="178" LINES="24"]
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q2 [0;36m([1;31mmain[0;36m) [0m$ cat Q2.lisp 
;; Function to split the list into two halves
(defun split-list (lst)
  (if (or (null lst) (null (cdr lst)))
      (list lst nil)
      (let ((first nil) (second nil))
        (loop for x in lst
              for i from 0
              do (if (evenp i)
                     (push x first)
                     (push x second)))
        (list (reverse first) (reverse second)))))

;; Merge two sorted lists
(defun my-merge (lst1 lst2)
  (cond ((null lst1) lst2)
        ((null lst2) lst1)
        ((<= (car lst1) (car lst2)) (cons (car lst1) (my-merge (cdr lst1) lst2)))
        (t (cons (car lst2) (my-merge lst1 (cdr lst2))))))

;; Mergesort function
(defun mergesort (lst)
  (if (or (null lst) (null (cdr lst)))
      lst
      (let* ((split (split-list lst))
             (left (first split))
             (right (second split)))
        (my-merge (mergesort left) (mergesort right)))))

;;Different Testing 
(print (mergesort '(1 2 3 4 5)))  
(print (mergesort '(5 4 3 2 1)))
(print (mergesort '(-5 -2 -3 -1 -4))) 
(print (mergesort '())) 
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q2 [0;36m([1;31mmain[0;36m) [0m$ cat Q2.lisp [8Pexit./a.out g++ QuickSort.cpp -std=gnu++17[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kload --[K[K[K[K[K[K[Ksbcl --load Q2.lisp 
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.

(1 2 3 4 5) 
(1 2 3 4 5) 
(-5 -4 -3 -2 -1) 
NIL 
* ^Z
[1]+  Stopped                 sbcl --load Q2.lisp
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q2 [0;36m([1;31mmain[0;36m) [0m$ exit
exit
There are stopped jobs.
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q2 [0;36m([1;31mmain[0;36m) [0m$ clear
[H[2J[3J[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q2 [0;36m([1;31mmain[0;36m) [0m$ clear[1Pexitsbcl --load Q2.lisp [8Pcat[C[C[C[C[C[C[C[C[C[8Pexit[K[K[K[Kcd ..
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3 [0;36m([1;31mmain[0;36m) [0m$ ls
[0m[34;42mQ1[0m  [34;42mQ2[0m  [34;42mQ3[0m  [34;42mQ4[0m
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3 [0;36m([1;31mmain[0;36m) [0m$ cd Q3/
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ ls
Q3.lisp
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ clear
[H[2J[3J[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ clear[3Plscd Q3/[4Pls[K[Kcd ..lear[1Pexitsbcl --load Q2.lisp [8Pcat[C[C[C[C[C[C[C[C[C[8@sbcl --load[C[C[C[C[C[C[C[C[C[8Pcat[C[C[C[C[C[C[C[C[C[8Pexit./a.out g++ QuickSort.cpp -std=gnu++17./a.out [K[4Pexit./a.out g++ QuickSort.cpp -std=gnu++17[12Pcat QuickSort.cpp exit[Kquitclear./a.out g++ QuickSort.cpp -std=gnu++17[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kcd Q3
bash: cd: Q3: No such file or directory
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ cd ..
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3 [0;36m([1;31mmain[0;36m) [0m$ cd Q3
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ clear
[H[2J[3J[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ c[Kls
Q3.lisp
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ cd Q[K[K[K[Kscript Q3.lisp 
Script started, file is Q3.lisp
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ ./[K[Kcta[K[Kat cd[K[KQ2.l[K[K[K3.lisp 
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ cat Q3.lisp 
(defun my-merge (left right)
  ;; Merges two sorted lists
  (let ((result '()))
    (loop while (and left right)
          do (if (<= (car left) (car right))
                  (progn
                    (push (car left) result) ;; Add left element
                    (setf left (cdr left)))  ;; Move left forward
                  (progn
                    (push (car right) result) ;; Add right element
                    (setf right (cdr right))))) ;; Move right forward
    (append (nreverse result) left right))) ;; Append remaining elements

(defun bottom-up-merge-sort (list)
  ;; Bottom-up merge sort
  (let ((pairs '())
        (remaining list))
    ;; Pairwise merging
    (loop while remaining
          do (progn
               (if (cdr remaining)
                   (push (my-merge (list (car remaining)) (list (cadr remaining))) pairs)
                   (push (list (car remaining)) pairs))
               (setf remaining (cddr remaining))))
    ;; Merge until one sorted list remains
    (loop while (> (length pairs) 1)
          do (let ((merged '()))
               (loop for i from 0 to (- (length pairs) 2) by 2
                     do (push (my-merge (nth i pairs) (nth (1+ i) pairs)) merged))
               (if (oddp (length pairs))
                   (push (car (last pairs)) merged))
               (setf pairs (nreverse merged))))
    (car pairs))) ;; Return sorted list

(princ (bottom-up-merge-sort '(1 7 2 1 8 6 5 3 7 9 4))) 
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ cat Q3.lisp [8Pexit./a.out [K[K[K[K[K[K[K[Ksbcl --load Q3.lisp 
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
(1 1 2 3 4 5 6 7 7 8 9)
* ^Z
[1]+  Stopped                 sbcl --load Q3.lisp
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ exit
exit
There are stopped jobs.
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ clear
[H[2J[3J[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ script ./[K[KQ3.txt
Script started, file is Q3.txt
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ exit./a.out g++ QuickSort.cpp -std=gnu++17[12Pcat QuickSort.cpp exit[Kcat QuickSort.cpp g++ QuickSort.cpp -std=gnu++17./a.out [K[4Pexit[Kexit[K[K[K[Kcat Q3.lisp 
(defun my-merge (left right)
  ;; Merges two sorted lists
  (let ((result '()))
    (loop while (and left right)
          do (if (<= (car left) (car right))
                  (progn
                    (push (car left) result) ;; Add left element
                    (setf left (cdr left)))  ;; Move left forward
                  (progn
                    (push (car right) result) ;; Add right element
                    (setf right (cdr right))))) ;; Move right forward
    (append (nreverse result) left right))) ;; Append remaining elements

(defun bottom-up-merge-sort (list)
  ;; Bottom-up merge sort
  (let ((pairs '())
        (remaining list))
    ;; Pairwise merging
    (loop while remaining
          do (progn
               (if (cdr remaining)
                   (push (my-merge (list (car remaining)) (list (cadr remaining))) pairs)
                   (push (list (car remaining)) pairs))
               (setf remaining (cddr remaining))))
    ;; Merge until one sorted list remains
    (loop while (> (length pairs) 1)
          do (let ((merged '()))
               (loop for i from 0 to (- (length pairs) 2) by 2
                     do (push (my-merge (nth i pairs) (nth (1+ i) pairs)) merged))
               (if (oddp (length pairs))
                   (push (car (last pairs)) merged))
               (setf pairs (nreverse merged))))
    (car pairs))) ;; Return sorted list

(princ (bottom-up-merge-sort '(1 7 2 1 8 6 5 3 7 9 4))) 
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ sbcl --load Q3.lisp 
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
While evaluating the form starting at line 1, column 0
  of #P"/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3/Q3.lisp":

debugger invoked on a UNBOUND-VARIABLE in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The variable SCRIPT is unbound.

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [RETRY   ] Retry EVAL of current toplevel form.
  1: [CONTINUE] Ignore error and continue loading file "/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3/Q3.lisp".
  2: [ABORT   ] Abort loading file "/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3/Q3.lisp".
  3:            Ignore runtime option --load "Q3.lisp".
  4:            Skip rest of --eval and --load options.
  5:            Skip to toplevel READ/EVAL/PRINT loop.
  6: [EXIT    ] Exit SBCL (calling #'EXIT, killing the process).

(SB-INT:SIMPLE-EVAL-IN-LEXENV SCRIPT #<NULL-LEXENV>)
0] ^Z
[1]+  Stopped                 sbcl --load Q3.lisp
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ clear
[H[2J[3J[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ exit
exit
There are stopped jobs.
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ scrit[K[Kipt Q3.lisp [K[K[K[K[Ktxt
Script started, file is Q3.txt
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ l[Ksl[K[Kls[K[Kexit./a.out g++ QuickSort.cpp -std=gnu++17[12Pcat QuickSort.cpp exit[Kquitexitcat QuickSort.cpp [K[K[K[K[K[K[K[K[K[K[K[K[Kq[K3.3[Ktxt [K[K[K[Klisp 
Script started on 2025-02-18 19:08:45+00:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="178" LINES="24"]
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ ./[K[Kcta[K[Kat cd[K[KQ2.l[K[K[K3.lisp 
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ cat Q3.lisp 
(defun my-merge (left right)
  ;; Merges two sorted lists
  (let ((result '()))
    (loop while (and left right)
          do (if (<= (car left) (car right))
                  (progn
                    (push (car left) result) ;; Add left element
                    (setf left (cdr left)))  ;; Move left forward
                  (progn
                    (push (car right) result) ;; Add right element
                    (setf right (cdr right))))) ;; Move right forward
    (append (nreverse result) left right))) ;; Append remaining elements

(defun bottom-up-merge-sort (list)
  ;; Bottom-up merge sort
  (let ((pairs '())
        (remaining list))
    ;; Pairwise merging
    (loop while remaining
          do (progn
               (if (cdr remaining)
                   (push (my-merge (list (car remaining)) (list (cadr remaining))) pairs)
                   (push (list (car remaining)) pairs))
               (setf remaining (cddr remaining))))
    ;; Merge until one sorted list remains
    (loop while (> (length pairs) 1)
          do (let ((merged '()))
               (loop for i from 0 to (- (length pairs) 2) by 2
                     do (push (my-merge (nth i pairs) (nth (1+ i) pairs)) merged))
               (if (oddp (length pairs))
                   (push (car (last pairs)) merged))
               (setf pairs (nreverse merged))))
    (car pairs))) ;; Return sorted list

(princ (bottom-up-merge-sort '(1 7 2 1 8 6 5 3 7 9 4))) 
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ exit
exit
Script done, file is Q3.txt
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ clear
[H[2J[3J[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ script Q.[K3.lisp [K[K[K[K[Ktxt
Script started, file is Q3.txt
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ exit[K[K[K[Kcat Q3.lisp 
(defun my-merge (left right)
  ;; Merges two sorted lists
  (let ((result '()))
    (loop while (and left right)
          do (if (<= (car left) (car right))
                  (progn
                    (push (car left) result) ;; Add left element
                    (setf left (cdr left)))  ;; Move left forward
                  (progn
                    (push (car right) result) ;; Add right element
                    (setf right (cdr right))))) ;; Move right forward
    (append (nreverse result) left right))) ;; Append remaining elements

(defun bottom-up-merge-sort (list)
  ;; Bottom-up merge sort
  (let ((pairs '())
        (remaining list))
    ;; Pairwise merging
    (loop while remaining
          do (progn
               (if (cdr remaining)
                   (push (my-merge (list (car remaining)) (list (cadr remaining))) pairs)
                   (push (list (car remaining)) pairs))
               (setf remaining (cddr remaining))))
    ;; Merge until one sorted list remains
    (loop while (> (length pairs) 1)
          do (let ((merged '()))
               (loop for i from 0 to (- (length pairs) 2) by 2
                     do (push (my-merge (nth i pairs) (nth (1+ i) pairs)) merged))
               (if (oddp (length pairs))
                   (push (car (last pairs)) merged))
               (setf pairs (nreverse merged))))
    (car pairs))) ;; Return sorted list

(princ (bottom-up-merge-sort '(1 7 2 1 8 6 5 3 7 9 4))) 
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ sbcl --load l[KQ3.lisp 
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
(1 1 2 3 4 5 6 7 7 8 9)
* ^Z
[1]+  Stopped                 sbcl --load Q3.lisp
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ exit
exit
There are stopped jobs.
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q3 [0;36m([1;31mmain[0;36m) [0m$ cd ..
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3 [0;36m([1;31mmain[0;36m) [0m$ clear
[H[2J[3J[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3 [0;36m([1;31mmain[0;36m) [0m$ cleard ..[1Pexitsbcl --load Q3.lisp [8Pcat[C[C[C[C[C[C[C[C[C[8Pexitcat Q3.lisp [8@sbcl --load[C[C[C[C[C[C[C[C[Cexit[Kcd ..leard ..[1Pexitsbcl --load Q3.lisp [8Pcat[C[C[C[C[C[C[C[C[C[8Pexitcat Q3.lisp [8Pexit./a.out g++ QuickSort.cpp -std=gnu++17[12Pcat QuickSort.cpp exit[Kquitclear./a.out g++ QuickSort.cpp -std=gnu++17[Kexit[Kstopexit[K[K[K[Kscript Q4.[K[K[K[K[K[K[K[K[K[Kcd Home[K[K[K[KQ4/
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ scrit[Kpt Q4.txt
Script started, file is Q4.txt
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ cat Q4.lisp 
;;function to insert an element into a sorted list
(defun insert (item sorted)
  (cond ((null sorted) (list item))
        ((<= item (car sorted)) (cons item sorted))
        (t (cons (car sorted) (insert item (cdr sorted))))))

;; Insertion sort function
(defun insertion-sort (lst)
  (if (null lst)
      nil
      (insert (car lst) (insertion-sort (cdr lst)))))

;;Different Testings
(print (insertion-sort '(4 2 7 4 5)))  
(print (insertion-sort '(3 4 8 7 1)))  
(print (insertion-sort '(-5 -2 -3 -1 -4)))  
(print (insertion-sort '()))  
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ sbcl --load Q4.lisp 
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.

(2 4 4 5 7) 
(1 3 4 7 8) 
(-5 -4 -3 -2 -1) 
NIL 
* ^Z
[1]+  Stopped                 sbcl --load Q4.lisp
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ exit
exit
There are stopped jobs.
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ clear
[H[2J[3J[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ clear[1Pexitsbcl --load Q4.lisp [K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kscript Q4.txt 
Script started, file is Q4.txt
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ exitcat Q3.lisp [8Pexit./a.out g++ QuickSort.cpp -std=gnu++17[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kcat QuickSort.cpp [K[K[K[K[K[K[K[K[K[K[K[K[K[KQ4.lisp 
;;function to insert an element into a sorted list
(defun insert (item sorted)
  (cond ((null sorted) (list item))
        ((<= item (car sorted)) (cons item sorted))
        (t (cons (car sorted) (insert item (cdr sorted))))))

;; Insertion sort function
(defun insertion-sort (lst)
  (if (null lst)
      nil
      (insert (car lst) (insertion-sort (cdr lst)))))

;;Different Testings
(print (insertion-sort '(4 2 7 4 5)))  
(print (insertion-sort '(3 4 8 7 1)))  
(print (insertion-sort '(-5 -2 -3 -1 -4)))  
(print (insertion-sort '()))  
[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ cat Q4.lisp [8Pexitcat Q3.lisp [K[K[K[K[K[K[K[K[K[K[K[Ka[Ksbcl --load Q4.lisp 
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.

(2 4 4 5 7) 
(1 3 4 7 8) 
(-5 -4 -3 -2 -1) 
NIL 
* ^Z
[1]+  Stopped                 sbcl --load Q4.lisp
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ exit
exit
There are stopped jobs.
[0;32m@maigaPassword [1;31mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ clear
[H[2J[3J[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homework3/Q4 [0;36m([1;31mmain[0;36m) [0m$ [K[0;32m@maigaPassword [0mâžœ [1;34m/workspaces/csci-330-homeworks-maigaPassword/Homewo